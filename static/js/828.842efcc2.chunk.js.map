{"version":3,"file":"static/js/828.842efcc2.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","hooks/useContacts.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsSorted = state => state.sortByName;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter, selectIsSorted],\n  (contacts, filterValue, isSorted) => {\n    const normalizedFilter = filterValue.toLowerCase();\n    switch (isSorted) {\n      case false:\n        return contacts.filter(contact =>\n          contact.name.toLowerCase().includes(normalizedFilter, 0)\n        );\n      case true:\n        return contacts\n          .filter(contact =>\n            contact.name.toLowerCase().includes(normalizedFilter, 0)\n          )\n          .sort((a, b) => a.name.localeCompare(b.name));\n      default:\n        return contacts;\n    }\n  }\n);\n","import { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n  selectFilter,\n  selectIsSorted,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\n\nexport const useContacts = () => {\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  const filter = useSelector(selectFilter);\n  const sorted = useSelector(selectIsSorted);\n  const visibleContacts = useSelector(selectVisibleContacts);\n  return { contacts, error, isLoading, filter, visibleContacts, sorted };\n};\n","import styled from '@emotion/styled';\n\nexport const FormStyle = styled.form`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  width: 900px;\n  padding: 20px;\n  font-weight: 600;\n  color: #f06292;\n  /* border: 3px solid rgba(216, 116, 225, 1); */\n  border-radius: 10px;\n  background-color: rgba(230, 242, 255, 0.7);\n  box-shadow: 2px 3px 3px 2px rgba(20, 20, 20, 0.5);\n  font-style: italic;\n`;\n\nexport const InputStyle = styled.input`\n  height: 40px;\n  width: 210px;\n  font-size: 20px;\n  padding: 0 10px;\n  border: none;\n  border-radius: 20px;\n  margin-left: 20px;\n  margin-right: auto;\n  &:focus {\n    outline-color: #f06292;\n  }\n`;\nexport const Label = styled.label`\n  font-size: 30px;\n  text-align: center;\n`;\n\nexport const ButtonStyle = styled.button`\n  padding: 7px 25px;\n  display: flex;\n  align-items: center;\n  /* height: 50px; */\n  /* background-color: #f06292; */\n  border: 2px solid #f06292;\n  color: #f06292;\n  font-size: 20px;\n  color: #f06292;\n  border-radius: 25px;\n\n  box-shadow: 2px 2px 2px 0px rgba(20, 20, 20, 0.5);\n  &:hover {\n    background-color: #f06292;\n    color: white;\n  }\n`;\n","import React from 'react';\nimport { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { useContacts } from 'hooks/useContacts';\nimport {\n  FormStyle,\n  InputStyle,\n  ButtonStyle,\n  Label,\n} from './ContactForm.styled';\nimport { addContact } from 'redux/contacts/operations';\nimport { setSortByName } from 'redux/sort/sortSlice';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const { contacts } = useContacts();\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const searchResult = contacts.find(contact => contact.name === name);\n    if (searchResult) {\n      alert(`${name} is already in contacts`);\n      return false;\n    }\n\n    dispatch(setSortByName(false));\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormStyle onSubmit={handleSubmit}>\n      <Label htmlFor=\"inputName\">Name</Label>\n      <InputStyle\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        id=\"inputName\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={evt => setName(evt.target.value)}\n        placeholder=\"Enter name\"\n      />\n      <Label htmlFor=\"inputNumber\">Number</Label>\n      <InputStyle\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        id=\"inputNumber\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        onChange={evt => setNumber(evt.target.value)}\n        placeholder=\"Enter phone number\"\n      />\n      <ButtonStyle type=\"submit\">Add contact</ButtonStyle>\n    </FormStyle>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FilterStyle = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 900px;\n  font-size: 30px;\n  font-weight: 600;\n  margin-bottom: 30px;\n  color: #f06292;\n  padding: 20px;\n  /* border: 3px solid rgba(216, 116, 225, 1); */\n  border-radius: 10px;\n  background-color: rgba(230, 242, 255, 0.7);\n  box-shadow: 2px 3px 4px 2px rgba(20, 20, 20, 0.5);\n  font-style: italic;\n`;\n\nexport const FilterInput = styled.input`\n  margin-left: 10px;\n  width: 210px;\n  font-size: 20px;\n  height: 40px;\n  border: none;\n  border-radius: 20px;\n  padding: 0 15px;\n  &:focus {\n    outline-color: #f06292;\n  }\n`;\nexport const FilterLabel = styled.label`\n  margin-right: 20px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nexport const Checkbox = styled.input`\n  width: 30px;\n  height: 30px;\n  margin-left: 10px;\n`;\n","import React from 'react';\nimport { useContacts } from 'hooks/useContacts';\n\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { setSortByName } from 'redux/sort/sortSlice';\nimport { FilterStyle, FilterInput, FilterLabel } from './Filter.styled';\nimport { Checkbox } from '@mui/material';\nexport const Filter = () => {\n  const { filter, isSorted } = useContacts();\n  const dispatch = useDispatch();\n\n  const onChangeFilter = evt => dispatch(setFilter(evt.target.value));\n  const onChangeSortedByName = evt => {\n    return dispatch(setSortByName(evt.target.checked));\n  };\n  return (\n    <FilterStyle>\n      <FilterLabel>\n        Find contact by Name\n        <FilterInput\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={evt => onChangeFilter(evt)}\n          placeholder=\"Enter search name\"\n        ></FilterInput>\n      </FilterLabel>\n      <FilterLabel>\n        [A-Z]\n        <Checkbox\n          type=\"checkbox\"\n          checked={isSorted}\n          onChange={onChangeSortedByName}\n          sx={{\n            '& .MuiSvgIcon-root': { fontSize: 28 },\n            color: 'rgba(240, 98, 146, 1)',\n            '&.Mui-checked': {\n              color: 'rgba(240, 98, 146, 1)',\n            },\n          }}\n        />\n      </FilterLabel>\n    </FilterStyle>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactStyle = styled.li`\n  margin: 0;\n  padding: 15px 0;\n  display: flex;\n  /* width: 800px; */\n  justify-content: space-between;\n  align-items: center;\n  font-style: italic;\n  font-size: 20px;\n  font-weight: 400;\n  border-bottom: 2px solid black;\n\n  /* background-color: rgba(200, 210, 210, 0.7);\n  &:nth-child(2n + 1) {\n    background-color: rgba(200, 220, 220, 0.7);\n  } */\n`;\nexport const ButtonStyle = styled.button`\n  padding: 5px 25px;\n  display: flex;\n  align-items: center;\n  color: #f06292;\n  /* background-color: #f06292; */\n  /* font-size: 20px; */\n  border: 2px solid #f06292;\n  border-radius: 25px;\n  box-shadow: 2px 2px 2px 0px rgba(20, 20, 20, 0.5);\n  &:hover {\n    background-color: #f06292;\n    color: white;\n  }\n`;\nexport const Name = styled.p`\n  font-size: 24px;\n  font-weight: 600;\n  color: #f06292;\n  width: 380px;\n  margin: 0;\n`;\n\nexport const Number = styled.p`\n  font-size: 24px;\n  font-weight: 600;\n  color: #f06292;\n  margin-right: auto;\n  margin: 0;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { ContactStyle, ButtonStyle, Name, Number } from './Contact.styled';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport function Contact({ contact }) {\n  const dispatch = useDispatch();\n  const { name, number, id } = contact;\n  const handleDeleteContact = () => dispatch(deleteContact(id));\n\n  return (\n    <ContactStyle>\n      <Name>{name} :</Name>\n      <Number>{number}</Number>\n      <ButtonStyle type=\"button\" onClick={handleDeleteContact}>\n        Delete\n      </ButtonStyle>\n    </ContactStyle>\n  );\n}\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }),\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding: 0 20px;\n  margin: 0;\n  overflow-y: scroll;\n  height: calc(100vh - 450px);\n`;\nexport const ListContainer = styled.div`\n  width: 900px;\n  height: calc(100vh - 440px);\n  padding: 5px;\n  /* border: 3px solid rgba(216, 116, 225, 1); */\n  border-radius: 10px;\n  background-color: rgba(230, 242, 255, 0.7);\n  box-shadow: 2px 3px 3px 2px rgba(20, 20, 20, 0.5);\n`;\nexport const Message = styled.p`\n  text-align: center;\n  font-size: 30px;\n`;\n","import { Contact } from 'components/Contact/Contact';\nimport { useContacts } from 'hooks/useContacts';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { List, ListContainer, Message } from './ContactList.styled';\n\nexport function ContactList() {\n  const dispatch = useDispatch();\n  const { visibleContacts } = useContacts();\n\n  useEffect(() => {\n    dispatch(fetchContacts('/contacts'));\n  }, [dispatch]);\n\n  return (\n    <ListContainer>\n      <List>\n        {visibleContacts.length === 0 && (\n          <Message>There are no contacts for your search</Message>\n        )}\n        {visibleContacts.map(item => {\n          return <Contact key={item.id} contact={item} id={item.id} />;\n        })}\n      </List>\n    </ListContainer>\n  );\n}\n","import styled from '@emotion/styled';\nimport { createGlobalStyle } from 'styled-components';\n\nexport const Global = createGlobalStyle`\n\n* {\n      \n       margin:0;\n\n       padding:0;\n\n       box-sizing:border-box;\n\n       font-family: 'Droid Sans' sans-serif;\n         \n       }`;\n\nexport const AppSection = styled.div`\n  padding-top: 50px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  /* background-color: rgba(232, 116, 225, 0.2); */\n  background-image: linear-gradient(\n      rgba(50, 47, 66, 0.2),\n      rgba(50, 47, 66, 0.2) 100%\n    ),\n    url('https://cdn.pixabay.com/photo/2015/11/10/14/33/hawaii-1037024_1280.jpg');\n  background-size: cover;\n  height: 100vh;\n`;\n\nexport const TitleOne = styled.h1`\n  font-size: 32px;\n  color: rgba(50, 50, 50, 0.5);\n  border-radius: 17px;\n  padding: 0 20px;\n  box-shadow: 2px 3px 3px 2px rgba(20, 20, 20, 0.5);\n`;\n\nexport const TitleContacts = styled.h2`\n  font-size: 32px;\n  color: rgba(50, 50, 50, 0.5);\n  border-radius: 17px;\n  padding: 0 20px;\n  box-shadow: 2px 3px 3px 2px rgba(20, 20, 20, 0.5);\n`;\n","import React from 'react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { AppSection, TitleOne, TitleContacts } from './Contacts.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <AppSection>\n      <TitleOne>Phonebook</TitleOne>\n      <ContactForm />\n      <TitleContacts>Contacts</TitleContacts>\n      <Filter />\n      {error && <b>ERROR: {error}</b>}\n\n      {isLoading && <Loader />}\n      <ContactList />\n    </AppSection>\n  );\n};\nexport default Contacts;\n"],"names":["selectFilter","state","filter","selectIsLoading","contacts","isLoading","selectError","error","selectContacts","items","selectIsSorted","sortByName","selectVisibleContacts","createSelector","filterValue","isSorted","normalizedFilter","toLowerCase","contact","name","includes","sort","a","b","localeCompare","useContacts","useSelector","sorted","visibleContacts","FormStyle","styled","_templateObject","_taggedTemplateLiteral","InputStyle","_templateObject2","Label","_templateObject3","ButtonStyle","_templateObject4","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","_jsxs","onSubmit","evt","preventDefault","find","alert","concat","setSortByName","addContact","children","_jsx","htmlFor","type","value","id","pattern","title","required","onChange","target","placeholder","FilterStyle","FilterInput","FilterLabel","Filter","_useContacts","setFilter","onChangeFilter","Checkbox","checked","sx","fontSize","color","ContactStyle","Name","Number","Contact","_ref","onClick","deleteContact","List","ListContainer","Message","ContactList","useEffect","fetchContacts","length","map","item","createGlobalStyle","AppSection","TitleOne","TitleContacts","Loader"],"sourceRoot":""}